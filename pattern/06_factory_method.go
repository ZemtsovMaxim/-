package pattern

/*
	Реализовать паттерн «фабричный метод».
	Объяснить применимость паттерна, его плюсы и минусы, а также реальные примеры использования данного примера на практике.
	https://en.wikipedia.org/wiki/Factory_method_pattern

	Фабричный метод — это порождающий паттерн проектирования, который определяет общий интерфейс для создания объектов в суперклассе,
	позволяя подклассам изменять тип создаваемых объектов.
	Паттерн Фабричный метод предлагает создавать объекты не напрямую, используя оператор new, а через вызов особого фабричного метода.

	+
	Избавляет класс от привязки к конкретным классам продуктов.
 	Выделяет код производства продуктов в одно место, упрощая поддержку кода.
 	Упрощает добавление новых продуктов в программу.
 	Реализует принцип открытости/закрытости.

	-
	Может привести к созданию больших параллельных иерархий классов, так как для каждого класса продукта надо создать свой подкласс создателя.
*/

import "fmt"

// Product интерфейс определяет методы, которые должен реализовать каждый продукт
type Product interface {
	Use() string
}

// ConcreteProduct - конкретный продукт, реализующий интерфейс Product
type ConcreteProduct struct{}

func (cp *ConcreteProduct) Use() string {
	return "Используется ConcreteProduct"
}

// Creator определяет метод-фабрику, который создает экземпляр продукта
type Creator interface {
	FactoryMethod() Product
}

// ConcreteCreator - конкретный создатель, реализующий метод-фабрику
type ConcreteCreator struct{}

func (cc *ConcreteCreator) FactoryMethod() Product {
	return &ConcreteProduct{}
}

// Пример использования

func ExampleUsage() {
	// Создаем конкретного создателя
	creator := &ConcreteCreator{}

	// Используем метод-фабрику для создания продукта
	product := creator.FactoryMethod()
	fmt.Println(product.Use())
}
